<?php
namespace common\models;

use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\Expression;
use yii\helpers\VarDumper;

/**
 * Singer model
 *
 * @property integer $id
 * @property integer $singer_id
 * @property string $title
 * @property string $slug
 * @property string $lyrics
 * @property integer $hit
 * @property integer $status
 * @property integer $created_at
 */
class Song extends ActiveRecord
{
    const STATUS_ACTIVE = 1;
    const STATUS_PASSIVE = 0;

    public static $statuses = [
        self::STATUS_PASSIVE    => 'Passive',
        self::STATUS_ACTIVE     => 'Active',
    ];

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%songs}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['singer_id', 'title', 'slug', 'lyrics'], 'required'],
            ['singer_id', 'exist', 'targetClass' => Singer::class, 'targetAttribute' => ['singer_id' => 'id']],
            ['title', 'string', 'min' => 1, 'max' => 255],
            ['slug', 'string', 'min' => 1, 'max' => 150],
            ['hit', 'number'],
            ['hit', 'default', 'value' => 0],
            ['status', 'default', 'value' => self::STATUS_ACTIVE],
            ['status', 'in', 'range' => [self::STATUS_ACTIVE, self::STATUS_PASSIVE]],
        ];
    }

    /**
     * @return array
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::class,
                'createdAtAttribute' => 'create_time',
                'updatedAtAttribute' => false,
                'value' => new Expression('NOW()'),
            ],
        ];
    }

    public function save($runValidation = true, $attributeNames = null)
    {
        $this->lyrics   = nl2br($this->lyrics);

        return parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
    }

    /**
     * Relation
     */
    public function getSinger()
    {
        return $this->hasOne(Singer::class, ['id' => 'singer_id']);
    }

}