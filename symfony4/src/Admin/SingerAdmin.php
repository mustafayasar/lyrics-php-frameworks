<?php

namespace App\Admin;

use App\Entity\Singer;
use App\Entity\Song;
use App\Repository\SingerRepository;
use App\Repository\SongRepository;
use App\Utils\AdminHelper;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\Form\Validator\ErrorElement;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\TextType;

final class SingerAdmin extends AbstractAdmin
{
    private $repository;
    private $songRepository;

    public function __construct($code, $class, $baseControllerName, SingerRepository $repository, SongRepository $songRepository) {
        parent::__construct($code, $class, $baseControllerName);

        $this->repository       = $repository;
        $this->songRepository   = $songRepository;
    }

    public function validate(ErrorElement $errorElement, $object)
    {
        parent::validate($errorElement, $object);

        $object->setSlug($this->repository->createSlug($object));
    }

    public function postUpdate($object)
    {
        if ($object->getStatus() == Singer::STATUS_ACTIVE) {
            $this->songRepository->updateSongsStatus($object->getId(), Song::STATUS_SINGER_PASSIVE, Song::STATUS_ACTIVE);
        } elseif ($object->getStatus() == Singer::STATUS_PASSIVE) {
            $this->songRepository->updateSongsStatus($object->getId(), Song::STATUS_ACTIVE, Song::STATUS_SINGER_PASSIVE);
        }

        parent::postUpdate($object); // TODO: Change the autogenerated stub
    }

    protected function configureFormFields(FormMapper $formMapper)
    {
        $formMapper->add('name');

        if ($this->isCurrentRoute('edit')) {
            $formMapper->add('slug');
            $formMapper->add('hit', IntegerType::class, ['disabled' => 'disabled']);
        }

        $formMapper->add('status', ChoiceType::class, ['choices' => array_flip(Singer::$statuses)]);
    }

    protected function configureDatagridFilters(DatagridMapper $datagridMapper)
    {
        $datagridMapper->add('id', 'doctrine_orm_number', [], IntegerType::class);
        $datagridMapper->add('name');
        $datagridMapper->add('status', 'doctrine_orm_choice', [],ChoiceType::class, ['choices' => array_flip(Singer::$statuses)]);
    }

    protected function configureListFields(ListMapper $listMapper)
    {
        $listMapper->addIdentifier('id');
        $listMapper->addIdentifier('name');
        $listMapper->add('slug');
        $listMapper->add('hit');
        $listMapper->add('status', 'choice', ['choices' => Singer::$statuses]);
    }
}